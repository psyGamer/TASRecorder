<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>net7.0</TargetFramework>
        <AssemblyName>TASRecorder</AssemblyName>
        <RootNamespace>Celeste.Mod.TASRecorder</RootNamespace>
        <LangVersion>latest</LangVersion>
        <Nullable>enable</Nullable>

        <CelestePrefix Condition="'$(CelestePrefix)' == '' And Exists('../../../Celeste.dll')">../../..</CelestePrefix>
        <CelestePrefix Condition="'$(CelestePrefix)' == ''">../lib-stripped</CelestePrefix>

        <!-- See https://github.com/BepInEx/BepInEx.AssemblyPublicizer/issues/5 -->
        <NoWarn>$(NoWarn);CS0436</NoWarn>

        <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>None</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

        <WarningLevel>4</WarningLevel>

        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
        <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>
        <MSBuildAllProjects>true</MSBuildAllProjects>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="CelesteAnalyzer" Version="1.0.3.1" />
        <PackageReference Include="MonoMod.RuntimeDetour" Version="25.0.2" ExcludeAssets="runtime" />
        <PackageReference Include="YamlDotNet" Version="13.1.1" PrivateAssets="all"/>
        <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.1" PrivateAssets="all"/>
        <PackageReference Include="FFMpegCore" Version="5.1.0" />
        <PackageReference Include="NativeFileDialogSharp" Version="0.5.0" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="CelesteMod.Publicizer" Version="*" CelesteAssembly="$(CelestePrefix)/Celeste.dll" />
        <Reference Include="$(CelestePrefix)/MMHOOK_Celeste.dll" Private="false"/>
        <Reference Include="$(CelestePrefix)/FNA.dll" Publicize="true" Private="false"/>
    </ItemGroup>

    <Target Name="CopyFiles" AfterTargets="Build">
        <Copy SourceFiles="$(OutputPath)/$(AssemblyName).dll" DestinationFolder="../bin"/>
        <Copy SourceFiles="$(OutputPath)/$(AssemblyName).pdb" DestinationFolder="../bin"/>

        <Copy SourceFiles="$(OutputPath)/FFMpegCore.dll" DestinationFolder="../bin"/>
        <Copy SourceFiles="$(OutputPath)/Instances.dll" DestinationFolder="../bin"/>
        <Copy SourceFiles="$(OutputPath)/NativeFileDialogSharp.dll" DestinationFolder="../bin"/>

        <Copy SourceFiles="$(OutputPath)/runtimes/linux-x64/native/libnfd.so" DestinationFolder="../bin/lib-linux"/>
        <Copy SourceFiles="$(OutputPath)/runtimes/osx-x64/native/libnfd.dylib" DestinationFolder="../bin/lib-osx"/>
        <Copy SourceFiles="$(OutputPath)/runtimes/win-x64/native/nfd.dll" DestinationFolder="../bin/lib-win-x64"/>
    </Target>

    <ItemGroup>
        <FilesToPackage Include="..\Ahorn\**\*.*" />
        <FilesToPackage Include="..\Loenn\**\*.*" />
        <FilesToPackage Include="..\Dialog\**\*.*" />
        <FilesToPackage Include="..\Graphics\**\*.*" />
        <FilesToPackage Include="..\bin\**\*.*" />
        <FilesToPackage Include="..\everest.yaml" />
    </ItemGroup>

    <Target Name="PackageMod" AfterTargets="CopyFiles" Inputs="$(FilesToPackage)" Outputs="../TASRecorder.zip" Condition="'$(Configuration)' == 'Release'">
        <PackageMod Files="@(FilesToPackage)" OutputPath="../TASRecorder.zip" />
    </Target>

    <!-- Inline task used to create a .zip for the mod -->
    <UsingTask TaskName="PackageMod"
               TaskFactory="RoslynCodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
        <ParameterGroup>
            <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <OutputPath ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.IO" />
            <Using Namespace="System.IO.Compression" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var projectDir = Path.Combine(@"$(ProjectDir)", ".."); // Go one level up, since we're inside the 'Source' directory
                projectDir = Uri.UnescapeDataString(projectDir);

                if (File.Exists(OutputPath))
                    File.Delete(OutputPath);

                using (ZipArchive zip = ZipFile.Open(OutputPath, ZipArchiveMode.Create))
                {
                    foreach (var file in Files)
                    {
                        string filePath = file.GetMetadata("FullPath");
                        string entryName = GetRelativePath(projectDir, filePath);

                        zip.CreateEntryFromFile(filePath, entryName);
                    }
                }

                string GetRelativePath(string fromPath, string toPath)
                {
                    if (string.IsNullOrEmpty(fromPath)) throw new ArgumentNullException(nameof(fromPath));
                    if (string.IsNullOrEmpty(toPath))   throw new ArgumentNullException(nameof(toPath));

                    Uri fromUri = new Uri(fromPath);
                    Uri toUri = new Uri(toPath);

                    if (fromUri.Scheme != toUri.Scheme) { return toPath; } // path can't be made relative.

                    Uri relativeUri = fromUri.MakeRelativeUri(toUri);
                    string relativePath = Uri.UnescapeDataString(relativeUri.ToString());

                    if (toUri.Scheme.Equals("file", StringComparison.InvariantCultureIgnoreCase))
                    {
                        relativePath = relativePath.Replace(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar);
                    }

                    return relativePath;
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

</Project>
